apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "factorio-server-charts.fullname" . }}-mod-downloader-configmap
  labels:
    app: {{ template "factorio-server-charts.fullname" . }}
    chart: {{ template "factorio-server-charts.fullname" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  # credit to the factoriotools/factorio-docker team, most of this logic came from them
  # https://github.com/factoriotools/factorio-docker/blob/master/docker/files/update-mods.sh
  mod-downloader.sh: |
    FLAG_FILE="/factorio/mods/.mod_update_complete"

    # Check if flag file exists and UPDATE_MODS_ON_START is not true
    if [[ -f "$FLAG_FILE" && "${UPDATE_MODS_ON_START}" != "true" ]]; then
        echo "Mod update already completed previously. Skipping."
        exit 0
    fi
    modDir=/factorio/mods
    FACTORIOVERSION="$(cat /factorio/mods/factorioVersion)"
    USERNAME="$(cat /account/username)"
    TOKEN="$(cat /account/token)"
    if [[ -z ${USERNAME:-} ]]; then
      echo "You need to provide your Factorio username to update mods."
    fi

    if [[ -z ${TOKEN:-} ]]; then
      echo "You need to provide your Factorio token to update mods."
    fi
    {{- range .Values.mods.portal }}
        if [ -z {{ .version | quote }} ]; then
          /usr/local/bin/factorio-mod-downloader download official --name {{ .name | quote}} --destination $modDir --factorioVersion $FACTORIOVERSION --user $USERNAME --token $TOKEN
        else
          /usr/local/bin/factorio-mod-downloader download official --name {{ .name | quote}} --destination $modDir --factorioVersion $FACTORIOVERSION --user $USERNAME --token $TOKEN --version {{ .version | quote}}
        fi
    {{- end }}
    
    {{- range .Values.mods.unofficial }}
    /usr/local/bin/factorio-mod-downloader download unofficial --url {{ .url | quote}} --name {{ .name | quote}} --destination $modDir
    {{- end }}

    # Mark the update as complete by creating the flag file
    touch "$FLAG_FILE"
    echo "Mod update completed."




